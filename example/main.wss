
function main(a: int, b: string): int {
  var example: Example<int>;
  var foo: int;
  var bar: string = "hello";
  var counter: Counter<int>;

  foo = thePlayer(a, 5 + 3 * thePlayer.foo(5));

  for (i = 0; i < foo; i += 1) {
    thePlayer.foo = foo;

    if (foo < 5) {
      bar = "hola";

      if (thePlayer.test) {
        bar = "bonjour";
      }
    }
    else if (bar.test) {
      foo = 5;
    }
    else {
      bar += "world";
    }
  }

  while (foo > 5) {
    print("hello");
  }

  do {
    print("world");
  } while (foo < 5);

  filterOdd::<int>();


  return bar.lorem(foo);
}

statemachine class Example<T> extends Bar {
  private var foo: T;
  default foo = 10;

  public function init() {
    print("hello");
  }

  latent function justSleep() {
    Sleep(5);
  }

  timer myTimer() {

  }
}

struct Example {
  var i: int;
  default i = 5;
}

function filterOdd<T>(list: array<T>): array<T> {
  var nested_generics_test: array<T, Dictionnary<D>>;
  var output: array<T>;
  var i: int;

  for (i = 0; i < list.Size(); i += 1) {
    if (list[i].isEven()) {
      output.PushBack(list[i]);
    }
  }

  output.testGenericFunctionCall::<int>();

  return output;
}
