use std::cell::RefCell;
use std::str::FromStr;
use std::rc::Rc;

use crate::ast::{
    ProgramInformation,

    Program,
    Expression,
    OperationCode,
    TypedIdentifier,
    Statement,
    FunctionDeclaration,
    TypeDeclaration,
    VariableDeclaration,
    FunctionBodyStatement,
    FunctionCallParameters,
    IdentifierTerm,
    AssignmentType,
    IfStatement,
    ComparisonType,
    ForStatement,
    VariableDeclarationOrAssignment,
    VariableAssignment,
    WhileStatement,
    DoWhileStatement,
    ClassDeclaration,
    ClassBodyStatement,
    ClassType,
    EncapsulationType,
    StructDeclaration,
    StructBodyStatement,
    FunctionType,
    FunctionCall,
    EnumDeclaration,
    EnumBodyStatement,
    ClassInstantiation,
    FunctionDeclarationParameter,
    ParameterType,
    BooleanJoinType,
    SwitchStatement,
    SwitchCaseStatement
};

use crate::ast::codegen::context::Context;

grammar(information: &ProgramInformation);

pub Program: Program = {
    <statements:(<Statement>)*> => Program { statements }
}

Statement: Statement = {
    // Expression => Statement::Expression(<>),
    GlobalFunctionDeclaration => Statement::FunctionDeclaration(<>),
    ClassDeclaration => Statement::ClassDeclaration(<>),
    StructDeclaration => Statement::StructDeclaration(<>),
    EnumDeclaration => Statement::EnumDeclaration(<>)
};

// -----------------------------------------------------------------------------

ClassDeclaration: ClassDeclaration = {
    <class_type:ClassType> <name: Identifier> <generic_types:GenericTypesDeclaration?>
    <parent_class_name:(KeywordIn <Identifier>)?>
    <extended_class_name:(KeywordExtends <Identifier>)?>
    "{" <body_statements:(<ClassBodyStatement>)*> "}"
        => ClassDeclaration {
            context: Rc::new(RefCell::new(Context::new(&format!("class: {}", &name), generic_types.clone()))),
            class_type,
            name,
            parent_class_name,
            extended_class_name,
            body_statements,
            generic_types
        }
}

ClassType: ClassType = {
    KeywordStatemachine KeywordClass => ClassType::StatemachineClass,
    KeywordState => ClassType::State,
    KeywordClass => ClassType::Class,
}

ClassBodyStatement: ClassBodyStatement = {
    <encapsulation:EncapsulationType?> <property_declaration:VariableDeclaration> ";" => ClassBodyStatement::Property {
        encapsulation,
        property_declaration
    },

    <encapsulation:EncapsulationType?> <function_declaration:MethodDeclaration> => ClassBodyStatement::Method {
        encapsulation,
        function_declaration
    },

    KeywordDefault <VariableAssignment> ";" => ClassBodyStatement::DefaultValue(<>)
}

EncapsulationType: EncapsulationType = {
    KeywordPublic => EncapsulationType::Public,
    KeywordPrivate => EncapsulationType::Private,
    KeywordProtected => EncapsulationType::Protected
}

// -----------------------------------------------------------------------------

StructDeclaration: StructDeclaration = {
    KeywordStruct <name: Identifier> "{" <body_statements:(<StructBodyStatement>)*> "}"
        => StructDeclaration {
            name,
            body_statements
        }
}

StructBodyStatement: StructBodyStatement = {
    <VariableDeclaration> ";" => StructBodyStatement::Property(<>),
    KeywordDefault <VariableAssignment> ";" => StructBodyStatement::DefaultValue(<>)
}

// -----------------------------------------------------------------------------

EnumDeclaration: EnumDeclaration = {
    KeywordEnum <name: Identifier> "{" <body_statements:(<TrailingComma<EnumBodyStatement>>)> "}"
        => EnumDeclaration {
            name,
            body_statements
        }
}

EnumBodyStatement: EnumBodyStatement = {
    <name: Identifier> <number:("=" <Integer>)?> => EnumBodyStatement{<>},
}

// -----------------------------------------------------------------------------

GenericTypesDeclaration: Vec<String> = {
    "<" <SeparatedIdentifier> ">" => <>
}

GlobalFunctionDeclaration: Rc<FunctionDeclaration> = {
    <function_type:GlobalFunctionType> <name: Identifier> <generic_types:GenericTypesDeclaration?>
    "(" <parameters:TrailingComma<FunctionDeclarationParameter>> ")" <type_declaration:TypeDeclaration?>
    "{" <body_statements:(<FunctionBodyStatement>)*> "}"
        => {
            let has_generic_types = generic_types.is_some();
            let declaration = Rc::new(FunctionDeclaration {
                context: Rc::new(RefCell::new(Context::new(&format!("function: {}", &name), generic_types.clone()))),
                function_type: FunctionType::Function,
                name: name.clone(),
                generic_types,
                parameters,
                type_declaration: type_declaration,
                body_statements,
            });

            /*if has_generic_types {
                let mut generic_functions_register = information.generic_functions_register.borrow_mut();

                generic_functions_register.register_new_generic_function(&name, declaration.clone());
            }*/
            
            declaration
        }
};

MethodDeclaration: Rc<FunctionDeclaration> = {
    <function_type:FunctionType> <name: Identifier> <generic_types:GenericTypesDeclaration?>
    "(" <parameters:TrailingComma<FunctionDeclarationParameter>> ")" <type_declaration:TypeDeclaration?>
    "{" <body_statements:(<FunctionBodyStatement>)*> "}"
        => {
            let has_generic_types = generic_types.is_some();
            let declaration = Rc::new(FunctionDeclaration {
                context: Rc::new(RefCell::new(Context::new(&format!("method: {}", &name), generic_types.clone()))),
                function_type,
                name: name.clone(),
                generic_types,
                parameters,
                type_declaration: type_declaration,
                body_statements,
            });

            /*if has_generic_types {
                let mut generic_functions_register = information.generic_functions_register.borrow_mut();

                generic_functions_register.register_new_generic_function(&name, declaration.clone());
            }*/
            
            declaration
        }
};

FunctionDeclarationParameter: FunctionDeclarationParameter = {
    <param_type:ParameterType?> <typed_identifier:TypedIdentifier> => FunctionDeclarationParameter {
        parameter_type: param_type.unwrap_or(ParameterType::Copy),
        typed_identifier
    }
}

ParameterType: ParameterType = {
    KeywordOptional => ParameterType::Optional,
    KeywordOut => ParameterType::Reference
}

FunctionType: FunctionType = {
    KeywordTimer => FunctionType::Timer,
    KeywordEvent => FunctionType::Event,
    KeywordEntry KeywordFunction => FunctionType::Entry,
    GlobalFunctionType => <>
}

GlobalFunctionType: FunctionType = {
    KeywordLatent KeywordFunction => FunctionType::Latent,
    KeywordFunction => FunctionType::Function,
    KeywordExec KeywordFunction => FunctionType::Exec
}

FunctionBodyStatement: FunctionBodyStatement = {
    <var:VariableDeclaration> ";" => FunctionBodyStatement::VariableDeclaration(var),
    <expression:Expression> ";" => FunctionBodyStatement::Expression(expression),
    
    KeywordReturn <expression:Expression?> ";" => FunctionBodyStatement::Return(expression),
    KeywordBreak ";" => FunctionBodyStatement::Break,
    KeywordContinue ";" => FunctionBodyStatement::Continue,

    <var:VariableAssignment> ";" => FunctionBodyStatement::Assignement(<>),
    IfStatement => FunctionBodyStatement::IfStatement(<>),
    ForStatement => FunctionBodyStatement::ForStatement(<>),
    WhileStatement => FunctionBodyStatement::WhileStatement(<>),
    <DoWhileStatement> ";" => FunctionBodyStatement::DoWhileStatement(<>),
    SwitchStatement => FunctionBodyStatement::SwitchStatement(<>)
}

// -----------------------------------------------------------------------------

VariableAssignment: VariableAssignment = {
    <variable_name:SubExpression> <assignment_type:AssignmentType> <following_expression:Expression>
        => VariableAssignment {
            variable_name,
            assignment_type,
            following_expression
        }
}

// -----------------------------------------------------------------------------

ClassInstantiation: ClassInstantiation = {
    KeywordNew <class_name:Identifier> KeywordIn <lifetime:Identifier> => ClassInstantiation {
        class_name,
        lifetime
    }
}

// -----------------------------------------------------------------------------

IfStatement: IfStatement = {
    KeywordIf "(" <condition:Expression> ")" "{" <body_statements:(<FunctionBodyStatement>)*> "}" <else_statements:(<ElseStatement>)*>
        => IfStatement::If {
            condition,
            body_statements,
            else_statements
        }
}

ElseStatement: Box<IfStatement> = {
    KeywordElse <condition:(KeywordIf "(" <Expression> ")")?> "{" <body_statements:(<FunctionBodyStatement>)*> "}"
        => Box::new(IfStatement::Else {
            condition,
            body_statements
        })
}

// -----------------------------------------------------------------------------

ForStatement: ForStatement = {
    KeywordFor "(" <initialization:VariableDeclarationOrAssignment?> ";" <condition:Expression> ";" <iteration:VariableAssignment>  ")"
    "{" <body_statements:(<FunctionBodyStatement>)*> "}"
        => ForStatement { initialization, condition, iteration, body_statements }
}

VariableDeclarationOrAssignment: VariableDeclarationOrAssignment = {
    VariableDeclaration => VariableDeclarationOrAssignment::Declaration(<>),
    VariableAssignment => VariableDeclarationOrAssignment::Assignement(<>)
}

// -----------------------------------------------------------------------------

SwitchStatement: SwitchStatement = {
    KeywordSwitch "(" <compared:Expression> ")" "{" <cases:SwitchCaseStatement*> "}" => SwitchStatement {
        compared,
        cases
    }
}

SwitchCaseStatement: SwitchCaseStatement = {
    <cases:Case+> <body_statements:(<FunctionBodyStatement>)*> KeywordBreak ";" => SwitchCaseStatement::Case {
        cases,
        body_statements
    },

    KeywordDefault ":" <body_statements:(<FunctionBodyStatement>)*> KeywordBreak ";" => SwitchCaseStatement::Default {
        body_statements
    }
}

Case: Rc<Expression> = {
    KeywordCase <Expression> ":" => <>
}

// -----------------------------------------------------------------------------

WhileStatement: WhileStatement = {
    KeywordWhile "(" <condition:Expression> ")" "{" <body_statements:(<FunctionBodyStatement>)*> "}"
        => WhileStatement { condition, body_statements }
}

DoWhileStatement: DoWhileStatement = {
    KeywordDo "{" <body_statements:(<FunctionBodyStatement>)*> "}" KeywordWhile "(" <condition:Expression> ")"
        => DoWhileStatement { condition, body_statements }
}

// -----------------------------------------------------------------------------

VariableDeclaration: VariableDeclaration = {
    KeywordVar <typed_identifier: TypedIdentifier> <expression:("=" <Expression>)?> => VariableDeclaration {
        declaration: typed_identifier,
        following_expression: expression
    }
}

// -----------------------------------------------------------------------------

TypedIdentifier: TypedIdentifier = {
    <name:Identifier> <type_declaration:TypeDeclaration> => TypedIdentifier {
        name: name,
        type_declaration
    }
}

TypeDeclaration: TypeDeclaration = {
    ":" <Type> => <>
}

Type: TypeDeclaration = {
    <type_name:Identifier> <generic_type_assignment:("<" <TrailingComma<Type>> ">")?> => TypeDeclaration {
        type_name,
        generic_type_assignment,
        mangled_accessor: RefCell::new(None)
    }
}

// -----------------------------------------------------------------------------

FunctionCallParameters: FunctionCallParameters = {
    "(" <parameters:SeparatedOptionalExpressions> ")" => FunctionCallParameters(parameters)
}

// -----------------------------------------------------------------------------

Expression: Rc<Expression> = {
    NotExpression => <>,
    SubExpression => <>,
}

NotExpression: Rc<Expression> = {
    "!" <SubExpression> => Rc::new(Expression::Not(<>))
};

CastExpression: Rc<Expression> = {
    <expr:SubExpression> KeywordAs <cast:Identifier>  => Rc::new(Expression::Cast(cast, expr)),
}

SubExpression: Rc<Expression> = {
    SubExpression ExprOperation Factor => Rc::new(Expression::Operation(<>)),
    CastExpression => <>,
    Factor,
};

ExprOperation: OperationCode = {
    "+" => OperationCode::Add,
    "-" => OperationCode::Sub,
    "." => OperationCode::Nesting,
    "||" => OperationCode::BooleanJoin(BooleanJoinType::Or),
    ComparisonType => OperationCode::Comparison(<>)
};

Factor: Rc<Expression> = {
    Factor FactorOp Term => Rc::new(Expression::Operation(<>)),
    Term,
};

FactorOp: OperationCode = {
    "*" => OperationCode::Mul,
    "/" => OperationCode::Div,
    "&&" => OperationCode::BooleanJoin(BooleanJoinType::And),
    "|" => OperationCode::BitwiseOr,
    "&" => OperationCode::BitwiseAnd,
};

AssignmentType: AssignmentType = {
    "=" => AssignmentType::Equal,
    "+=" => AssignmentType::PlusEqual,
    "-=" => AssignmentType::MinusEqual,
    "*=" => AssignmentType::AsteriskEqual,
    "/=" => AssignmentType::SlashEqual
}

ComparisonType: ComparisonType = {
    "==" => ComparisonType::Equal,
    "!=" => ComparisonType::Different,
    ">" => ComparisonType::Greater,
    ">=" => ComparisonType::GreaterEqual,
    "<" => ComparisonType::Lower,
    "<=" => ComparisonType::LowerEqual
}

Term: Rc<Expression> = {
    Integer => Rc::new(Expression::Integer(<>)),
    "(" <SubExpression> ")",
    StringLiteral => Rc::new(Expression::String(String::from(<>))),
    CharLiteral => Rc::new(Expression::Name(String::from(<>))),

    IdentifierTerm => Rc::new(Expression::Identifier(<>)),
    ClassInstantiation => Rc::new(Expression::ClassInstantiation(<>)),
    <accessor:IdentifierTerm> <generic_types:("::" <GenericTypesDeclaration>)?> <parameters:FunctionCallParameters>
        => {
            let function_call = Rc::new(Expression::FunctionCall(FunctionCall {
                accessor,
                generic_types,
                parameters,
                mangled_accessor: RefCell::new(None)
            }));

            function_call
        },
};

Indexing: Rc<Expression> = {
    "[" <SubExpression> "]" => <>
}

IdentifierTerm: Box<IdentifierTerm> = {
    <text:Identifier> <indexing:Indexing*> => Box::new(IdentifierTerm {
        text,
        indexing
    })
}

// -----------------------------------------------------------------------------

Integer: String = {
    "+" <n:r"[0-9]+"> => <>.to_string(),
    "-" <n:r"[0-9]+"> => <>.to_string(),
    r"[0-9]+" => <>.to_string()
};

Boolean: bool = {
    "true" => true,
    "false" => false
}

Identifier: String = {
    IdentifierRegex => String::from(<>)
}

// -----------------------------------------------------------------------------

SeparatedOptionalExpressions = OptionalTrailingComma<Expression>;
SeparatedExpressions = TrailingComma<Expression>;
SeparatedTypedIdentifier = TrailingComma<TypedIdentifier>;
SeparatedIdentifier = TrailingComma<Identifier>;

DotSeparatedIdentifiers = DotSeparated<Identifier>;

OptionalTrailingComma<T>: Vec<Option<T>> = {
    <v:(<ElAndCommas<T>>)*> <e:T?> => match e {
        // for anyone, or future me, reading this:
        // This is the equivalent of: v.flatmap(|x| x.clone()).collect();
        // 
        // basically to convert [[Some(T), None, None], [None, Some(T)]]
        // into [Some(T), None, None, None, Some(T)]
        // All of this because it needs type annotation and i couldn't figure
        // how to access the `T` from the macro in lalrpop syntax, and the doc
        // is lacking a little i must say.
        None => {
            let mut o = Vec::new();

            for x in v {
                for y in x {
                    o.push(y.clone());
                }
            }

            o
        },

        Some(e) => {
            let mut o = Vec::new();

            for x in v {
                for y in x {
                    o.push(y.clone());
                }
            }

            o.push(Some(e));

            o
        }
    },
}

ElAndCommas<T>: Vec<Option<T>> = {
    <v:T> <c:(",")+> => {
        let mut output = Vec::new();

        output.push(Some(v));

        let mut u = (0..c.len() - 1)
            .into_iter()
            .map(|_| None)
            .collect();

        output.append(&mut u);

        output
    }
}

/// A comma separated list of `T` with the possibility of a trailing comma
TrailingComma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

/// A dot separated list of `T` with NO possibility of a trailing dot
DotSeparated<T>: Vec<T> = {
    <e:T> "." <ee:T> <mut v:("." <T> )*> => {
        v.push(e);
        v.push(ee);
        v
    }
};

/// A Tier,
/// 
///
Tier<Op,NextTier>: Rc<Expression> = {
    Tier<Op,NextTier> Op NextTier => Rc::new(Expression::Operation(<>)),
    NextTier
};

// `match`: Declares the precedence of regular expressions
// relative to one another when synthesizing
// the lexer
match {
    // These items have highest precedence.
    r"[0-9]+",

    "function" => KeywordFunction,
    "var" => KeywordVar,
    "return" => KeywordReturn,
    "if" => KeywordIf,
    "else" => KeywordElse,
    "for" => KeywordFor,
    "while" => KeywordWhile,
    "do" => KeywordDo,
    "class" => KeywordClass,
    "statemachine" => KeywordStatemachine,
    "state" => KeywordState,
    "extends" => KeywordExtends,
    "private" => KeywordPrivate,
    "public" => KeywordPublic,
    "protected" => KeywordProtected,
    "default" => KeywordDefault,
    "latent" => KeywordLatent,
    "struct" => KeywordStruct,
    "enum" => KeywordEnum,
    "timer" => KeywordTimer,
    "event" => KeywordEvent,
    "in" => KeywordIn,
    "entry" => KeywordEntry,
    "new" => KeywordNew,
    "as" => KeywordAs,
    "optional" => KeywordOptional,
    "out" => KeywordOut,
    "case" => KeywordCase,
    "switch" => KeywordSwitch,
    "break" => KeywordBreak,
    "continue" => KeywordContinue,
    "exec" => KeywordExec,
} else {
    // These items have next highest precedence.

    // Given an input like `123`, the number regex above
    // will match; but otherwise, given something like
    // `123foo` or `foo123`, this will match.
    //
    // Here, we also renamed the regex to the name `ID`, which we can
    // use in the grammar itself.
    r"\w+" => IdentifierRegex,

    r#"".*""# => StringLiteral,
    r#"'.*'"# => CharLiteral,

    // This `_` means "add in all the other strings and
    // regular expressions in the grammer here" (e.g.,
    // `"("`).
    _
} // you can have more `else` sections if you like